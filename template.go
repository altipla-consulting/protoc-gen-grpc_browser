package main

import (
	"strings"

	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	"github.com/reiver/go-stringcase"
	pbannotations "google.golang.org/genproto/googleapis/api/annotations"
)

type templateData struct {
	Version        string
	SourceFilename string
	Services       []*Service
}

func (data *templateData) Quote() string {
	return "`"
}

type Service struct {
	*descriptor.ServiceDescriptorProto
}

func (s *Service) Methods() []*Method {
	methods := []*Method{}
	for _, method := range s.GetMethod() {
		methods = append(methods, &Method{method})
	}

	return methods
}

type Method struct {
	*descriptor.MethodDescriptorProto
}

func (method *Method) HTTPMethod() string {
	if method.GetOptions() == nil {
		return ""
	}

	if !proto.HasExtension(method.Options, pbannotations.E_Http) {
		return ""
	}
	ext, err := proto.GetExtension(method.Options, pbannotations.E_Http)
	if err != nil {
		panic(err)
	}
	opts := ext.(*pbannotations.HttpRule)

	switch opts.GetPattern().(type) {
	case *pbannotations.HttpRule_Get:
		return "GET"

	case *pbannotations.HttpRule_Put:
		return "PUT"

	case *pbannotations.HttpRule_Post:
		return "POST"

	case *pbannotations.HttpRule_Delete:
		return "DELETE"
	}

	return ""
}

func (method *Method) Binding() string {
	ext, err := proto.GetExtension(method.Options, pbannotations.E_Http)
	if err != nil {
		panic(err)
	}
	opts := ext.(*pbannotations.HttpRule)

	var path string
	switch rule := opts.GetPattern().(type) {
	case *pbannotations.HttpRule_Get:
		path = rule.Get

	case *pbannotations.HttpRule_Put:
		path = rule.Put

	case *pbannotations.HttpRule_Post:
		path = rule.Post

	case *pbannotations.HttpRule_Delete:
		path = rule.Delete
	}

	segments := []string{}
	for _, segment := range strings.Split(path, "/") {
		if !strings.HasPrefix(segment, "{") {
			segments = append(segments, segment)
		} else {
			segments = append(segments, "${req."+stringcase.ToCamelCase(segment[1:]))
		}
	}

	return strings.Join(segments, "/")
}

const browserTemplate = `// Code generated by protoc-gen-grpc_browser {{.Version}}, DO NOT EDIT.
// Source: {{.SourceFilename}}
{{range .Services}}
{{$serviceName := .GetName}}
module.exports = class {{.GetName}}Client {
  constructor({server = '', authorization = '', hook = null} = {}) {
    this.server = server;
    this.authorization = authorization;
    this.hook = hook;
  }
  {{range .Methods}}{{if .HTTPMethod}}
  {{.GetName}}(req) {
    return this._call('{{.HTTPMethod}}', {{$.Quote}}{{.Binding}}{{$.Quote}}, req);
  }
  {{end}}{{end}}
  _call(method, url, req) {
    let opts = {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(req || {}),
    };
    if (this.authorization) {
      opts.headers.Authorization = this.authorization;
    }
    return fetch({{$.Quote}}${this.server}${url}{{$.Quote}}, opts)
      .then(response => {
        if (response.status !== 200) {
          let err = new Error(response.statusText);
          err.response = response;
          throw err;
        }

        if (this.hook) {
          this.hook(response);
        }

        return response.json();
      });
  }
};
{{end}}
`
