package main

import (
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
)

type templateData struct {
	Proto          *descriptor.FileDescriptorProto
	Version        string
	SourceFilename string
	Methods        map[string]string
	URLs           map[string]string
}

func (data *templateData) Quote() string {
	return "`"
}

const browserTemplate = `// Code generated by protoc-gen-grpc_browser {{.Version}}, DO NOT EDIT.
// Source: {{.SourceFilename}}
{{range .Proto.GetService}}
{{$serviceName := .GetName}}
module.exports = class {{.GetName}}Client {
  constructor({server = '', authorization = '', hook = null} = {}) {
    this.server = server;
    this.authorization = authorization;
    this.hook = hook;
  }
  {{range .GetMethod}}
  {{.GetName}}(req) {
    return this._call('{{index $.Methods .GetName}}', {{$.Quote}}{{index $.URLs .GetName}}{{$.Quote}}, req);
  }
  {{end}}
  _call(method, url, req) {
    let opts = {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(req || {}),
    };
    if (this.authorization) {
      opts.headers.Authorization = this.authorization;
    }
    return fetch({{$.Quote}}${this.server}/${url}{{$.Quote}}, opts)
      .then(response => {
        if (response.status !== 200) {
          let err = new Error(response.statusText);
          err.response = response;
          throw err;
        }

        if (this.hook) {
          this.hook(response);
        }

        return response.json();
      });
  }
};
{{end}}
`
