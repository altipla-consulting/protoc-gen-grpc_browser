package main

import (
	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	pbannotations "google.golang.org/genproto/googleapis/api/annotations"
)

type templateData struct {
	Version        string
	SourceFilename string
	Services       []*Service
}

func (data *templateData) Quote() string {
	return "`"
}

type Service struct {
	*descriptor.ServiceDescriptorProto
}

func (s *Service) Methods() []*Method {
	methods := []*Method{}
	for _, method := range s.GetMethod() {
		methods = append(methods, &Method{method})
	}

	return methods
}

type Method struct {
	*descriptor.MethodDescriptorProto
}

func (method *Method) HTTPMethod() string {
	if method.GetOptions() == nil {
		return ""
	}

	if !proto.HasExtension(method.Options, pbannotations.E_Http) {
		return ""
	}
	ext, err := proto.GetExtension(method.Options, pbannotations.E_Http)
	if err != nil {
		panic(err)
	}
	opts := ext.(*pbannotations.HttpRule)

	switch opts.GetPattern().(type) {
	case *pbannotations.HttpRule_Get:
		return "GET"
	case *pbannotations.HttpRule_Put:
		return "PUT"
	case *pbannotations.HttpRule_Post:
		return "POST"
	case *pbannotations.HttpRule_Delete:
		return "DELETE"
	}

	return ""
}

func (method *Method) httpPath() string {
	ext, err := proto.GetExtension(method.Options, pbannotations.E_Http)
	if err != nil {
		panic(err)
	}
	opts := ext.(*pbannotations.HttpRule)

	switch rule := opts.GetPattern().(type) {
	case *pbannotations.HttpRule_Get:
		return rule.Get
	case *pbannotations.HttpRule_Put:
		return rule.Put
	case *pbannotations.HttpRule_Post:
		return rule.Post
	case *pbannotations.HttpRule_Delete:
		return rule.Delete
	}

	panic("http rule has no path")
}

func (method *Method) Path() (*Path, error) {
	return parseTemplate(method.httpPath())
}

func (method *Method) HasBody() bool {
	ext, err := proto.GetExtension(method.Options, pbannotations.E_Http)
	if err != nil {
		panic(err)
	}
	opts := ext.(*pbannotations.HttpRule)

	return opts.Body == "*"
}

const browserTemplate = `// Code generated by protoc-gen-grpc_browser {{.Version}}, DO NOT EDIT.
// Source: {{.SourceFilename}}

import { Caller } from '@altipla/grpc-browser';

{{range .Services}}
export default class {{.GetName}}Client {
  constructor(opts = {}) {
    this._caller = new Caller(opts);
  }{{range .Methods}}{{if .HTTPMethod}}

  {{.GetName}}(req) {
    {{$path := .Path -}}
    {{range .Path.Segments -}}
    {{with .Var -}}
    {{if .Parts -}}
    {
      let parts = {{$.Quote}}{{.Binding}}{{$.Quote}}.split('/');
      let fmt = {{$.Quote}}parameter req.{{.BindingName}} should have the format "{{.Format}}"{{$.Quote}};
      if (parts.length !== {{len .Parts}}) { throw new Error(fmt); }
      {{- range $i, $part := .Parts -}}{{if not (eq . "*")}}
      if (parts[{{$i}}] !== '{{.}}') { throw new Error(fmt); }
      {{- end -}}
      {{end}}
    }
    {{end -}}
    {{end -}}
    {{end -}}
    return this._caller.send('{{.HTTPMethod}}', {{$.Quote}}{{$path.Binding}}{{$.Quote}}, req, {{.HasBody}}, {{$path.UnsetKeys}});
  }{{end}}{{end}}
};
{{end}}
`
